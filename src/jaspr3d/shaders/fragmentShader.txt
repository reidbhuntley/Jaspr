#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 outColor;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;

void main(void){

	if(surfaceNormal == vec3(0.0,0.0,0.0)){
		outColor = texture(textureSampler, pass_textureCoords);
		return;
	}

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDot1 = dot(unitNormal,unitLightVector);
	float brightness = max(nDot1,0.2);
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitCameraVector = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitCameraVector);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	vec3 specularFinal = dampedFactor * reflectivity * lightColor;
	
	outColor = vec4(diffuse,1.0) * texture(textureSampler, pass_textureCoords) + vec4(specularFinal,1.0);

}